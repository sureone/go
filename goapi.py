# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_goapi', [dirname(__file__)])
        except ImportError:
            import _goapi
            return _goapi
        if fp is not None:
            try:
                _mod = imp.load_module('_goapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _goapi = swig_import_helper()
    del swig_import_helper
else:
    import _goapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, buffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptr"] = _goapi.buffer_ptr_set
    __swig_getmethods__["ptr"] = _goapi.buffer_ptr_get
    if _newclass:ptr = _swig_property(_goapi.buffer_ptr_get, _goapi.buffer_ptr_set)
    __swig_setmethods__["used"] = _goapi.buffer_used_set
    __swig_getmethods__["used"] = _goapi.buffer_used_get
    if _newclass:used = _swig_property(_goapi.buffer_used_get, _goapi.buffer_used_set)
    __swig_setmethods__["size"] = _goapi.buffer_size_set
    __swig_getmethods__["size"] = _goapi.buffer_size_get
    if _newclass:size = _swig_property(_goapi.buffer_size_get, _goapi.buffer_size_set)
    def __init__(self): 
        this = _goapi.new_buffer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _goapi.delete_buffer
    __del__ = lambda self : None;
buffer_swigregister = _goapi.buffer_swigregister
buffer_swigregister(buffer)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _goapi.Vector_x_set
    __swig_getmethods__["x"] = _goapi.Vector_x_get
    if _newclass:x = _swig_property(_goapi.Vector_x_get, _goapi.Vector_x_set)
    __swig_setmethods__["y"] = _goapi.Vector_y_set
    __swig_getmethods__["y"] = _goapi.Vector_y_get
    if _newclass:y = _swig_property(_goapi.Vector_y_get, _goapi.Vector_y_set)
    __swig_setmethods__["z"] = _goapi.Vector_z_set
    __swig_getmethods__["z"] = _goapi.Vector_z_get
    if _newclass:z = _swig_property(_goapi.Vector_z_get, _goapi.Vector_z_set)
    def __init__(self): 
        this = _goapi.new_Vector()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _goapi.delete_Vector
    __del__ = lambda self : None;
Vector_swigregister = _goapi.Vector_swigregister
Vector_swigregister(Vector)


def logicgo_init():
  return _goapi.logicgo_init()
logicgo_init = _goapi.logicgo_init

def logicgo_free(*args):
  return _goapi.logicgo_free(*args)
logicgo_free = _goapi.logicgo_free

def setSize(*args):
  return _goapi.setSize(*args)
setSize = _goapi.setSize

def startGamePy(*args):
  return _goapi.startGamePy(*args)
startGamePy = _goapi.startGamePy

def stepTo(*args):
  return _goapi.stepTo(*args)
stepTo = _goapi.stepTo

def setDead(*args):
  return _goapi.setDead(*args)
setDead = _goapi.setDead

def undoDead(*args):
  return _goapi.undoDead(*args)
undoDead = _goapi.undoDead

def setGameUser(*args):
  return _goapi.setGameUser(*args)
setGameUser = _goapi.setGameUser

def getCurTurn(*args):
  return _goapi.getCurTurn(*args)
getCurTurn = _goapi.getCurTurn

def getStepNum(*args):
  return _goapi.getStepNum(*args)
getStepNum = _goapi.getStepNum

def getLastStep(*args):
  return _goapi.getLastStep(*args)
getLastStep = _goapi.getLastStep

def getKilled(*args):
  return _goapi.getKilled(*args)
getKilled = _goapi.getKilled

def dumpGo(*args):
  return _goapi.dumpGo(*args)
dumpGo = _goapi.dumpGo

def dumpToHex(*args):
  return _goapi.dumpToHex(*args)
dumpToHex = _goapi.dumpToHex

def goPass(*args):
  return _goapi.goPass(*args)
goPass = _goapi.goPass

def getDianMuResult(*args):
  return _goapi.getDianMuResult(*args)
getDianMuResult = _goapi.getDianMuResult

def getDianMuResult2(*args):
  return _goapi.getDianMuResult2(*args)
getDianMuResult2 = _goapi.getDianMuResult2

def getGoGameResult(*args):
  return _goapi.getGoGameResult(*args)
getGoGameResult = _goapi.getGoGameResult

def getRecord(*args):
  return _goapi.getRecord(*args)
getRecord = _goapi.getRecord

def getGameStartTime(*args):
  return _goapi.getGameStartTime(*args)
getGameStartTime = _goapi.getGameStartTime
# This file is compatible with both classic and new-style classes.


